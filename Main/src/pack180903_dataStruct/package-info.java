/**
 * 顺序表
 */
/**
 * @author wss
 * 1.数组：底层实现方式一
 * 	----实现类：ArrayList
 *  ----自实现：无序数组MyArray，有序数组MyOrderArray
	 *  方法：增删改查和显示
		添加数据：直接在有效长度最后添加；
		显示数据：略
		查找数据（根据值）：检查是否有这个值，返回索引
		查找数据（根据索引）：检查索引是否超出有效长度
		删除数据（根据索引）：检查索引，将索引之后的全部数据往前挪
		更新数据：将索引对应的值设置为对应值
		
 * 2.栈和队列：
 * 	----栈实现类：Stack;队列实现类：Stack;
 *  ----自实现：MyStack,MyStack
	 *  栈：底层为一个数组，需要一个数记录栈顶端即数组尾端的索引
		（先进后出）
		    --------
		  ←  2,3,5,1|   top
		    -------- 
		方法：增删，查（顶端，空，满）
		添加数据：++top位等于添加的值
		删除数据：top--
		查看数据：top
		查看为空：top==-1
		查看为满：top==.length
		队列：底层为一个数组，需要三个数分别记录有效数据长度，队头，队尾
		（先进先出）
		           --------
		   front ←  2,3,5,1  ←  end,elements
		           -------- 
		方法：增删，查（顶端，空，满）
		添加数据：从队尾end添加，elements++
		删除数据：从队头front删除，elements--
		查看数据：返回队头front
		查看为空：elements==0
		查看为满：elements==.length
 *  
 *  
 * 3.链表：底层实现方式二
 * -----自实现：LinkList(ListNode)
	 * 单向链表：ListNode，只有next
		增删（从头结点增删，根据数值删），查（根据数值），显示所有
 * 
 * 4.双端链表和双向链表：
 * -----自实现：双端链表FirstLastLinkList，双向链表DoubleLinkList；
 * 数组：底层为一个数组，需要一个数记录数组中有效长度elements
	 *	双端链表：ListNode，prev，next
		增删（从头、尾节点插入，从头节点删、根据数值删），查（根据数值、为空），显示所有
		
		双向链表：ListNode，prev，next
		增删（从头、尾节点插入，从头、尾节点删，根据数值删），查（根据数值，为空），显示所有

 * 5.树：二叉树：每个节点最多只能有两个子节点的树；
 * -----自实现：TreeNode，Tree
 * 二叉树实现类：需要一个root根节点；
 		增删（插入节点，删除节点），查（查找节点）
 		规则：插入：比当前节点大，放右子节点，比当前节点小，放左子节点；
 		           查找：查找的值比当前节点值小，则继续查左子树；
 		           遍历：递归；
 		           删除节点：首先找到要删除的节点，考虑该节点出现的三种情况：
 		           1)叶子节点：直接父节点的该子节点（可能为左或右）直接为null
 		           2)有一个子节点：当前节点的父节点指向当前节点的子节点（可能为左或右）
 		           3)有两个子节点：使用中序后继来替代当前节点，中序后继
 * 6.哈希表
 * 7.图
 */
package pack180903_dataStruct;